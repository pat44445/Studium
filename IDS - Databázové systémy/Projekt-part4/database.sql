DROP TABLE Elem CASCADE CONSTRAINTS;
DROP TABLE Kouzelnik CASCADE CONSTRAINTS;
DROP TABLE Nabiti CASCADE CONSTRAINTS;
DROP TABLE Kouzlo CASCADE CONSTRAINTS;
DROP TABLE Svitek CASCADE CONSTRAINTS;
DROP TABLE Grimoar CASCADE CONSTRAINTS;
DROP TABLE Synergie CASCADE CONSTRAINTS;
DROP TABLE Obsahuje CASCADE CONSTRAINTS;

DROP SEQUENCE pocet_kouzelniku;

------------------------------------ VYTVORENI TABULEK---------------------------------------------
CREATE TABLE Elem (
    Barva VARCHAR(30) NOT NULL,
    Nazev VARCHAR(100),
    Specializace VARCHAR(255)
);

CREATE TABLE Kouzelnik (
    ID_kouzelnika NUMBER NOT NULL,
    Jmeno VARCHAR(100),
    Prijmeni VARCHAR(100),
    Datum_narozeni DATE NOT NULL,
    Velikost_many NUMBER,
    Dosazena_uroven VARCHAR(2)
);

CREATE TABLE Nabiti (
    ID_nabiti NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    Datum DATE NOT NULL,
    Cas DATE NOT NULL ,
    Mnozstvi_nabite_magie NUMBER,
    ID_kouzelnika NUMBER NOT NULL,
    Nazev_grimoaru VARCHAR(50) NOT NULL
);

CREATE TABLE Kouzlo(
    Nazev VARCHAR(255),
    Slozitost VARCHAR(20) NOT NULL ,
    Typ VARCHAR(255),
    Popis VARCHAR(255),
    Sila NUMBER NOT NULL,
    Barva VARCHAR(30) NOT NULL
);

CREATE TABLE Svitek(
    Nazev VARCHAR(50),
    Datum_vyroby DATE NOT NULL,
    Pouzit NUMBER(1) DEFAULT 0,
    Nazev_kouzla VARCHAR(255) NOT NULL,
    ID_kouzelnika NUMBER NOT NULL
);

CREATE TABLE Grimoar(
    Nazev VARCHAR(50),
    Datum_vyroby DATE NOT NULL,
    Uroven_nabiti NUMBER,
    ID_kouzelnika NUMBER NOT NULL
);

CREATE TABLE Obsahuje(
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    Nazev_kouzla VARCHAR(255) NOT NULL,
    Nazev_grimoaru VARCHAR(50) NOT NULL
);

CREATE TABLE Synergie(
    ID_synergie NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    Barva VARCHAR(30) NOT NULL,
    ID_kouzelnika NUMBER NOT NULL
);

----------------------- NASTAVENI PRIMARNICH KLICU-----------------------------------------

ALTER TABLE Elem ADD CONSTRAINT pk_elementu PRIMARY KEY (Barva);
ALTER TABLE Kouzelnik ADD CONSTRAINT pk_kouzelnika PRIMARY KEY (ID_kouzelnika);
ALTER TABLE Nabiti ADD CONSTRAINT pk_nabiti PRIMARY KEY (ID_nabiti);
ALTER TABLE Kouzlo ADD CONSTRAINT pk_kouzla PRIMARY KEY (Nazev);

ALTER TABLE Svitek ADD CONSTRAINT pk_svitku PRIMARY KEY (Nazev);
ALTER TABLE Grimoar ADD CONSTRAINT pk_grimoaru PRIMARY KEY (Nazev);

ALTER TABLE Synergie ADD CONSTRAINT pk_synergie PRIMARY KEY (ID_synergie);
ALTER TABLE Obsahuje ADD CONSTRAINT pk_obsahuje PRIMARY KEY (ID);

----------------------- NASTAVENI CIZICH KLICU-----------------------------------------

ALTER TABLE Kouzlo ADD CONSTRAINT fk_kouzlo_je FOREIGN KEY (Barva) REFERENCES Elem ON DELETE CASCADE;

ALTER TABLE Nabiti ADD CONSTRAINT fk_nabiti_nabilo FOREIGN KEY (Nazev_grimoaru) REFERENCES Grimoar ON DELETE CASCADE;
ALTER TABLE Nabiti ADD CONSTRAINT fk_nabiti_provedl FOREIGN KEY (ID_kouzelnika) REFERENCES Kouzelnik ON DELETE CASCADE;

ALTER TABLE Svitek ADD CONSTRAINT fk_svitek_obsahuje FOREIGN KEY (Nazev_kouzla) REFERENCES Kouzlo;
ALTER TABLE Svitek ADD CONSTRAINT fk_svitek_vlastni FOREIGN KEY (ID_kouzelnika) REFERENCES Kouzelnik;

ALTER TABLE Grimoar ADD CONSTRAINT fk_grimoar_obsahuje FOREIGN KEY (ID_kouzelnika) REFERENCES Kouzelnik;

ALTER TABLE Synergie ADD CONSTRAINT fk_ma_synergie FOREIGN KEY (ID_kouzelnika) REFERENCES Kouzelnik ON DELETE CASCADE;
ALTER TABLE Synergie ADD CONSTRAINT fk_synergie_s FOREIGN KEY (Barva) REFERENCES Elem ON DELETE CASCADE;

ALTER TABLE Obsahuje ADD CONSTRAINT fk_obsahuje FOREIGN KEY (Nazev_kouzla) REFERENCES Kouzlo ON DELETE CASCADE;
ALTER TABLE Obsahuje ADD CONSTRAINT fk_obsazeno_v FOREIGN KEY (Nazev_grimoaru) REFERENCES Grimoar ON DELETE CASCADE;

------------------------- Vytvoreni trigeru-----------------------------------------------


-- trigger na automaticke prirazeni ID_kouzelnikum
CREATE SEQUENCE pocet_kouzelniku
START WITH 0
MINVALUE 0;
CREATE OR REPLACE TRIGGER auto_id
    BEFORE INSERT ON Kouzelnik
    FOR EACH ROW
    BEGIN :new.ID_kouzelnika := pocet_kouzelniku.nextval;

END auto_id;

--triger na kotrolu urovne kouzelnika
CREATE OR REPLACE TRIGGER kontrola_urovne
	BEFORE INSERT OR UPDATE ON Kouzelnik
	FOR EACH ROW
BEGIN
	IF
        :new.Dosazena_uroven != 'A' and :new.Dosazena_uroven != 'B' and
        :new.Dosazena_uroven != 'C' and :new.Dosazena_uroven != 'D' and
	    :new.Dosazena_uroven != 'E' and :new.Dosazena_uroven != 'S' and
        :new.Dosazena_uroven != 'SS'
	THEN
		Raise_Application_Error(-20005, 'Spatny format urovne kouzelnika');
	END IF;
END;

------------------------- Vytvoreni procedur-----------------------------------------------

--procedura zjistujici procentualni zastoupeni kouzelniku s danou urovni v synergii dane barvy
/
CREATE OR REPLACE PROCEDURE procent_zastoupeni_kouzelniku(barva IN VARCHAR, uroven IN VARCHAR)
IS
      CURSOR data_1 IS SELECT * from Synergie;
      CURSOR data_2 IS SELECT * from Kouzelnik;

      Kouzelnik_radek Kouzelnik%ROWTYPE;
      Synerg_radek Synergie%ROWTYPE;

      vsichni NUMBER;
      pocet_kouzelniku NUMBER;

BEGIN
    vsichni := 0;
    pocet_kouzelniku := 0;

    open data_1;
    open data_2;

    loop
    fetch data_1 into Synerg_radek;
    exit when data_1%NOTFOUND;
    IF (Synerg_radek.Barva = barva) THEN
        loop
            fetch data_2 into Kouzelnik_radek;
            exit when data_2%NOTFOUND;
            IF (Kouzelnik_radek.Dosazena_uroven = uroven AND Kouzelnik_radek.ID_kouzelnika = Synerg_radek.ID_kouzelnika) THEN
                pocet_kouzelniku := pocet_kouzelniku + 1;
            END IF;
        end loop;
        vsichni := vsichni + 1;
    END IF;
    end loop;

    DBMS_OUTPUT.put_line('Kouzelnici s urovni ' || uroven || ' maji v synergii barvy ' || barva || ' procentualni zastoupeni: ' || (pocet_kouzelniku * 100)/vsichni || '%');
EXCEPTION
    WHEN ZERO_DIVIDE THEN
        DBMS_OUTPUT.put_line('Kouzelnici urovne ' || uroven || ' maji procentualni zastoupeni v synergii barvy ' || barva || ' 0%');
WHEN OTHERS THEN
    Raise_Application_Error (-20000, 'Nastala chyba!');
END;
/

--procedurea zjistujici prumernou uroven
CREATE OR REPLACE PROCEDURE prumerna_uroven
IS
    CURSOR data_1 IS SELECT * from Kouzelnik;

    Kouzelnik_radek Kouzelnik%ROWTYPE;
    pocet_kouzelniku NUMBER;
    soucet NUMBER;
    prumer NUMBER;
BEGIN
    pocet_kouzelniku := 0;
    soucet := 0;

    open data_1;
    loop
    fetch data_1 into Kouzelnik_radek;
    exit when data_1%NOTFOUND;
    CASE
        WHEN Kouzelnik_radek.Dosazena_uroven = 'E' THEN soucet := soucet + 1;
        WHEN Kouzelnik_radek.Dosazena_uroven = 'D' THEN soucet := soucet + 2;
        WHEN Kouzelnik_radek.Dosazena_uroven = 'C' THEN soucet := soucet + 3;
        WHEN Kouzelnik_radek.Dosazena_uroven = 'B' THEN soucet := soucet + 4;
        WHEN Kouzelnik_radek.Dosazena_uroven = 'A' THEN soucet := soucet + 5;
        WHEN Kouzelnik_radek.Dosazena_uroven = 'S' THEN soucet := soucet + 6;
        WHEN Kouzelnik_radek.Dosazena_uroven = 'SS' THEN soucet := soucet + 7;
        ELSE Raise_Application_Error (-20007, 'Uroven schopnosti kouzelnika neexistuje');
    END CASE;
    pocet_kouzelniku := pocet_kouzelniku + 1;
    end loop;

    prumer := ROUND(soucet / pocet_kouzelniku, 0);
    CASE
        WHEN prumer = 1 THEN DBMS_OUTPUT.put_line('Prumerna uroven kouzelniku je E');
        WHEN prumer = 2 THEN DBMS_OUTPUT.put_line('Prumerna uroven kouzelniku je D');
        WHEN prumer = 3 THEN DBMS_OUTPUT.put_line('Prumerna uroven kouzelniku je C');
        WHEN prumer = 4 THEN DBMS_OUTPUT.put_line('Prumerna uroven kouzelniku je B');
        WHEN prumer = 5 THEN DBMS_OUTPUT.put_line('Prumerna uroven kouzelniku je A');
        WHEN prumer = 6 THEN DBMS_OUTPUT.put_line('Prumerna uroven kouzelniku je S');
        WHEN prumer = 7 THEN DBMS_OUTPUT.put_line('Prumerna uroven kouzelniku je SS');
        ELSE Raise_Application_Error (-20007, 'Nastala chyba');
    END CASE;
END;

------------------------- VLOZENI HODNOT-----------------------------------------------
INSERT INTO Elem (Barva, Nazev, Specializace) VALUES ('Pomerancove-oranzova','Ohniva magie','Utok');
INSERT INTO Elem (Barva, Nazev, Specializace) VALUES ('Modra','Vodni cary a kouzla','Utok');
INSERT INTO Elem (Barva, Nazev, Specializace) VALUES ('Zelena','Magie prirody','Obrana');
INSERT INTO Elem (Barva, Nazev, Specializace) VALUES ('Ruzova','Lecitelstvi','Podpora');
INSERT INTO Elem (Barva, Nazev, Specializace) VALUES ('Cerna','Smrt','Utok');

INSERT INTO Kouzlo (Nazev, Slozitost, Typ, Popis, Sila, Barva) VALUES ('Ohniva koule', 'Vysoka', 'Zaklinani', 'Ohniva koule', 100, 'Pomerancove-oranzova');
INSERT INTO Kouzlo (Nazev, Slozitost, Typ, Popis, Sila, Barva) VALUES ('Vodni vir', 'Mala', 'Iluze', 'Vytvori iluzi vodniho viru', 20, 'Modra');
INSERT INTO Kouzlo (Nazev, Slozitost, Typ, Popis, Sila, Barva) VALUES ('Leciva vlna', 'Stredni', 'Obnoveni', 'Vytvori lecivou prirodni ved', 90, 'Zelena');
INSERT INTO Kouzlo (Nazev, Slozitost, Typ, Popis, Sila, Barva) VALUES ('Kruh smrti', 'Velmi vysoka', 'Nekromancie', 'Vytvori silny kruh smrti', 1500, 'Cerna');

INSERT INTO Kouzelnik (Jmeno, Prijmeni, Datum_narozeni, Velikost_many, Dosazena_uroven) VALUES ('Melichar','Moudry', TO_DATE('01-02-1960', 'dd-mm-yyyy'), 100, 'SS');
INSERT INTO Kouzelnik (Jmeno, Prijmeni, Datum_narozeni, Velikost_many, Dosazena_uroven) VALUES ('Morgavsa','Fialova', TO_DATE('08-04-1975', 'dd-mm-yyyy'), 95, 'S');
INSERT INTO Kouzelnik (Jmeno, Prijmeni, Datum_narozeni, Velikost_many, Dosazena_uroven) VALUES ('Morgana','Mala', TO_DATE('25-06-1995', 'dd-mm-yyyy'), 40, 'D');
INSERT INTO Kouzelnik (Jmeno, Prijmeni, Datum_narozeni, Velikost_many, Dosazena_uroven) VALUES ('Alfred','Neklidny', TO_DATE('03-12-1986', 'dd-mm-yyyy'), 50, 'B');

--spusteni trigeru 2 s chybou
--INSERT INTO Kouzelnik (Jmeno, Prijmeni, Datum_narozeni, Velikost_many, Dosazena_uroven) VALUES ('Alfred','Neklidny', TO_DATE('03-12-1986', 'dd-mm-yyyy'), 50, 'xx');

INSERT INTO Synergie (Barva, ID_kouzelnika) VALUES ('Modra', 0);
INSERT INTO Synergie (Barva, ID_kouzelnika) VALUES ('Cerna', 0);
INSERT INTO Synergie (Barva, ID_kouzelnika) VALUES ('Modra', 1);
INSERT INTO Synergie (Barva, ID_kouzelnika) VALUES ('Pomerancove-oranzova', 1);
INSERT INTO Synergie (Barva, ID_kouzelnika) VALUES ('Ruzova', 1);
INSERT INTO Synergie (Barva, ID_kouzelnika) VALUES ('Ruzova', 2);
INSERT INTO Synergie (Barva, ID_kouzelnika) VALUES ('Pomerancove-oranzova', 3);

INSERT INTO Svitek (Nazev, Datum_vyroby, Nazev_kouzla, ID_kouzelnika) VALUES ('Svitek ohnive moci', TO_DATE('10-04-1962', 'dd-mm-yyyy'), 'Ohniva koule', 0);
INSERT INTO Svitek (Nazev, Datum_vyroby, Nazev_kouzla, ID_kouzelnika) VALUES ('Svitek vzkriseni',TO_DATE('07-02-1969', 'dd-mm-yyyy'), 'Leciva vlna', 3);

INSERT INTO Grimoar (Nazev, Datum_vyroby, Uroven_nabiti, ID_kouzelnika) VALUES ('Melicharova kouzelna kniha', TO_DATE('24-10-1970', 'dd-mm-yyyy'), 1000, 0);
INSERT INTO Grimoar (Nazev, Datum_vyroby, Uroven_nabiti, ID_kouzelnika) VALUES ('Ataraxia', TO_DATE('04-12-605', 'dd-mm-yyyy'), 300, 1);
INSERT INTO Grimoar (Nazev, Datum_vyroby, Uroven_nabiti, ID_kouzelnika) VALUES ('Kniha dusi', TO_DATE('09-08-1985', 'dd-mm-yyyy'), 400, 0);

INSERT INTO Obsahuje (Nazev_kouzla, Nazev_grimoaru) VALUES ('Ohniva koule', 'Ataraxia');
INSERT INTO Obsahuje (Nazev_kouzla, Nazev_grimoaru) VALUES ('Kruh smrti', 'Ataraxia');
INSERT INTO Obsahuje (Nazev_kouzla, Nazev_grimoaru) VALUES ('Vodni vir', 'Melicharova kouzelna kniha');
INSERT INTO Obsahuje (Nazev_kouzla, Nazev_grimoaru) VALUES ('Leciva vlna', 'Melicharova kouzelna kniha');

INSERT INTO Nabiti (Datum, Cas, Mnozstvi_nabite_magie, ID_kouzelnika, Nazev_grimoaru) VALUES (TO_DATE('01-02-2020', 'dd-mm-yyyy'),TO_DATE('15:00:00', 'hh24:mi:ss'), 20, 000, 'Melicharova kouzelna kniha');
INSERT INTO Nabiti (Datum, Cas, Mnozstvi_nabite_magie, ID_kouzelnika, Nazev_grimoaru) VALUES (TO_DATE('05-03-2019', 'dd-mm-yyyy'),TO_DATE('12:30:26', 'hh24:mi:ss'), 36, 000, 'Kniha dusi');
INSERT INTO Nabiti (Datum, Cas, Mnozstvi_nabite_magie, ID_kouzelnika, Nazev_grimoaru) VALUES (TO_DATE('08-03-2019', 'dd-mm-yyyy'),TO_DATE('12:00:26', 'hh24:mi:ss'), 43, 001, 'Kniha dusi');
INSERT INTO Nabiti (Datum, Cas, Mnozstvi_nabite_magie, ID_kouzelnika, Nazev_grimoaru) VALUES (TO_DATE('18-06-2019', 'dd-mm-yyyy'),TO_DATE('8:43:00', 'hh24:mi:ss'), 54, 003, 'Ataraxia');

------------------------- Zakladni dotazy-----------------------------------------------
-- zobrazeni vsech utocnych elementu--
--SELECT * FROM Elem WHERE Specializace = 'Utok';

-- Zobrazeni vsech synergii kouzelnika Melichara--- (join 2 tables)
--SELECT DISTINCT Barva FROM Kouzelnik NATURAL JOIN Synergie WHERE Jmeno = 'Melichar';

-- Zobrazeni kouzelnika, ktery provedl nabiti grimoaru 18.06.2019--- (join 2 tables)
--SELECT DISTINCT Jmeno, Prijmeni FROM Nabiti NATURAL JOIN Kouzelnik WHERE Datum = '18-06-2019';

--Zobrazeni vsech nazvu elemetu ktere jsou obsazeny v kouzlech v grimoaru Melicharova kouzelna kniha--- (join 3 tables)
--SELECT DISTINCT E.Nazev FROM Elem E JOIN Kouzlo K ON K.Barva = E.Barva JOIN Obsahuje O ON O.Nazev_kouzla = K.Nazev WHERE O.Nazev_grimoaru = 'Melicharova kouzelna kniha';

--Zobrazeni kolikrat byl nabit kazdy grimoar-- (group by + agregace)
--SELECT COUNT(Datum), Nazev_grimoaru FROM Nabiti GROUP BY Nazev_grimoaru;

--Zobrazeni kolik kouzelniku ma synrgii s jednotlivymi barvami(group by + agregace)
--SELECT COUNT(ID_kouzelnika), Barva FROM Synergie GROUP BY Barva;

--Zobrazeni vsech kouzelniku, kteri vlastni nejaky svitek(in + vnoreny select)
--SELECT * FROM Kouzelnik WHERE ID_kouzelnika IN (SELECT ID_kouzelnika FROM Svitek);

--Zobrazeni jmen kouzelniku, kteri maji synergii s modrou barvou-- (exists)
--SELECT DISTINCT Jmeno, Prijmeni FROM Kouzelnik K WHERE EXISTS(SELECT Barva FROM Synergie S WHERE K.ID_kouzelnika = S.ID_kouzelnika AND S.Barva = 'Modra');

--SELECT * from Synergie NATURAL JOIN Kouzelnik;

------------------------- Zavolani procedur-----------------------------------------------
begin
procent_zastoupeni_kouzelniku( 'Modra' , 'SS');
end;

begin
prumerna_uroven;
end;

------------------------- Explain plan-----------------------------------------------
DROP INDEX idx_synergie;

--Zobrazi s kolika barvama ma kazdy kouzelnik synergii
EXPLAIN PLAN FOR
SELECT Jmeno, Prijmeni, COUNT(Barva) FROM Kouzelnik NATURAL JOIN Synergie GROUP BY Jmeno, Prijmeni ORDER BY Jmeno;
SELECT plan_table_output FROM TABLE(DBMS_XPLAN.display);

CREATE INDEX idx_synergie on Synergie(ID_kouzelnika);

EXPLAIN PLAN FOR
SELECT Jmeno, Prijmeni, COUNT(Barva) FROM Kouzelnik NATURAL JOIN Synergie GROUP BY Jmeno, Prijmeni ORDER BY Jmeno;
SELECT plan_table_output FROM TABLE(DBMS_XPLAN.display);

------------------------- Prideleni prav-----------------------------------------------
GRANT ALL ON Obsahuje TO xdvora3d;

GRANT ALL ON Elem TO xzoban01;
GRANT ALL ON Kouzelnik TO xzoban01;
GRANT ALL ON Nabiti TO xzoban01;
GRANT ALL ON Kouzlo TO xzoban01;
GRANT ALL ON Svitek TO xzoban01;
GRANT ALL ON Grimoar TO xzoban01;
GRANT ALL ON obsahuje TO xzoban01;
GRANT ALL ON Synergie TO xzoban01;


GRANT EXECUTE ON procent_zastoupeni_kouzelniku TO xzoban01;
GRANT EXECUTE ON prumerna_uroven TO xzoban01;

------------------------- Vytvoreni pohledu-----------------------------------------------
DROP VIEW kniha_obsahuje;
DROP MATERIALIZED VIEW kniha_obsahuje_m;

CREATE VIEW kniha_obsahuje
    AS SELECT NAZEV_KOUZLA FROM XDVORA3D.OBSAHUJE WHERE NAZEV_GRIMOARU = 'Ataraxia';

CREATE MATERIALIZED VIEW kniha_obsahuje_m
--REFRESH ON COMMIT
    AS SELECT NAZEV_KOUZLA FROM XDVORA3D.OBSAHUJE WHERE NAZEV_GRIMOARU = 'Ataraxia';


INSERT INTO XDVORA3D.OBSAHUJE(Nazev_kouzla, Nazev_grimoaru) VALUES ('Vodni vir','Ataraxia'); -- pridani kouzla vodni vir

SELECT * FROM kniha_obsahuje; --Pohled obsahuje pridane kouzlo vodni vir

SELECT * FROM kniha_obsahuje_m; --Materializovany pohled nebsahuje pridane kouzlo vodni vir, toto kouzlo se zobrazi az po commitu v pripade pridani radku REFRESH ON COMMIT.


